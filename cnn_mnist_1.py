# -*- coding: utf-8 -*-
"""CNN_mnist 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11MvTWuWcBGEfoFHSORb0ZR5A5P4Jq_8a
"""

from keras.utils import np_utils
from keras.models import Sequential
from keras.layers import Dense
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
np.random.seed(3)

from keras.datasets import mnist
(x_train_image, y_train_label), (x_test_image, y_test_label) = mnist.load_data()

print(x_train_image.shape)
print(y_train_label.shape)
print(x_test_image.shape)
print(y_test_label.shape)

fig = plt.gcf()
fig.set_size_inches(12, 10)

for i in range(0,10):
    ax = plt.subplot(5,5,1+i)
    ax.imshow(x_train_image[i], cmap = 'binary')
    title= "label= " + str(y_train_label[i])
    ax.set_title(title,fontsize = 10)
    ax.set_xticks([]);ax.set_yticks([])
plt.show()

x_Train4D = x_train_image.reshape(x_train_image.shape[0],28,28,1).astype('float32')
x_Test4D = x_test_image.reshape(x_test_image.shape[0],28,28,1).astype('float32')

x_Train4D_normalize = x_Train4D /255
x_Test4D_normalize = x_Test4D / 255
print(x_Train4D_normalize.shape)
print(x_Test4D_normalize.shape)

y_Train_OneHot = np_utils.to_categorical(y_train_label)
y_Test_OneHot  = np_utils.to_categorical(y_test_label)
print(y_Train_OneHot.shape)
print(y_Test_OneHot.shape)

from keras.models import Sequential
from keras.layers import Dense,Dropout,Flatten,Conv2D,MaxPooling2D

model = Sequential()

model.add(Conv2D(filters=16, kernel_size =(5,5),padding='same',input_shape = (28,28,1),activation='relu'))

model.add(Flatten())

model.add(Dense(10, activation='softmax'))

print(model.summary())

model.compile(loss='categorical_crossentropy',optimizer='adam', metrics=['accuracy'])

train_history=model.fit(x=x_Train4D_normalize, y = y_Train_OneHot, validation_split= 0.2,epochs=10, batch_size=300,verbose=2)

"""epoches = iteration

"""

def show_train_history(train_history, train, validation):
  plt.plot(train_history.history[train])
  plt.plot(train_history.history[validation])
  plt.title('Train History')
  plt.ylabel(train)
  plt.xlabel('Epoch')
  plt.legend(['train', 'validation'], loc='upper left')
  plt.show()

show_train_history(train_history, 'accuracy', 'val_accuracy')

show_train_history(train_history, 'loss', 'val_loss')

scores = model.evaluate(x_Train4D_normalize, y_Train_OneHot)
print()
print('accuracy = ', scores[1])

predict_X = model.predict(x_Test4D)
classes_X = np.argmax(predict_X, axis=1)

from inspect import indentsize
def plot_images_labels_prediction(images,labels,classes_X,idx,num=10):

  fig = plt.gcf()
  fig.set_size_inches(12,14)
  if num>25 : num =25
  for i in range(0, num):
    ax= plt.subplot(5,5, 1+i)
    ax.imshow(images[idx], cmap='binary')
    title = "label= "+str(labels[idx])
    if len(classes_X) > 0:
      title +=" ,predict="+str(classes_X)

    ax.set_title(title, fontsize=10)
    ax.set_xticks([]);ax.set_yticks([])
    idx+=1
  plt.show()

plot_images_labels_prediction(x_test_image,y_test_label, classes_X, idx=320)

pd.crosstab(y_test_label,classes_X,rownames= ['label'], colnames=['predict'])